exporting patches:
# HG changeset patch
# User Jiuyue Ma <majiuyue@ncic.ac.cn>
# Date 1398396282 -28800
# Node ID 3458d2b8216dc39d8e6a1e4cad5f28e3f2b7c626
# Parent  13b5ba4be2f062084b0ee72e822003ce58b9b8b6
add carbon stats output

diff -r 13b5ba4be2f0 -r 3458d2b8216d src/base/SConscript
--- a/src/base/SConscript	Fri Apr 04 10:33:17 2014 +0800
+++ b/src/base/SConscript	Fri Apr 25 11:24:42 2014 +0800
@@ -72,6 +72,7 @@
 Source('loader/symtab.cc')
 
 Source('stats/text.cc')
+Source('stats/carbon.cc')
 
 DebugFlag('Annotate', "State machine annotation debugging")
 DebugFlag('AnnotateQ', "State machine annotation queue debugging")
diff -r 13b5ba4be2f0 -r 3458d2b8216d src/base/stats/carbon.cc
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/src/base/stats/carbon.cc	Fri Apr 25 11:24:42 2014 +0800
@@ -0,0 +1,240 @@
+/*
+ * Copyright (c) 2014 ACS, ICT
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Jiuyue Ma
+ */
+
+#if defined(__APPLE__)
+#define _GLIBCPP_USE_C99 1
+#endif
+
+#if defined(__sun)
+#include <math.h>
+#endif
+
+#include <cassert>
+#ifdef __SUNPRO_CC
+#include <math.h>
+#endif
+#include <cmath>
+#include <fstream>
+#include <iostream>
+#include <sstream>
+#include <string>
+
+#include <netdb.h>
+#include <netinet/in.h>
+#include <sys/socket.h>
+#include <sys/types.h>
+
+#include "base/stats/carbon.hh"
+#include "base/stats/info.hh"
+#include "base/cast.hh"
+#include "base/misc.hh"
+#include "base/str.hh"
+
+using namespace std;
+
+#ifndef NAN
+float __nan();
+/** Define Not a number. */
+#define NAN (__nan())
+/** Need to define __nan() */
+#define __M5_NAN
+#endif
+
+#ifdef __M5_NAN
+float
+__nan()
+{
+    union {
+        uint32_t ui;
+        float f;
+    } nan;
+
+    nan.ui = 0x7fc00000;
+    return nan.f;
+}
+#endif
+
+static int
+remote_connect(const char *host, const char *port, struct addrinfo hints)
+{
+    struct addrinfo *res, *res0;
+    int s, error;
+
+    if ((error = getaddrinfo(host, port, &hints, &res)))
+        panic("getaddrinfo: %s", gai_strerror(error));
+
+    res0 = res;
+    do {
+        if ((s = socket(res0->ai_family, res0->ai_socktype,
+                        res0->ai_protocol)) < 0)
+            continue;
+
+        if (connect(s, res0->ai_addr, res0->ai_addrlen) == 0)
+            break;
+
+        close(s);
+        s = -1;
+    } while ((res0 = res0->ai_next) != NULL);
+
+    freeaddrinfo(res);
+
+    return (s);
+}
+
+namespace Stats {
+
+std::list<Info *> &statsList();
+
+Carbon::Carbon()
+    : sockfd(-1), descriptions(false)
+{
+    ts = time(NULL);
+}
+
+Carbon::~Carbon()
+{
+    if (sockfd != -1)
+        close(sockfd);
+}
+
+bool
+Carbon::valid() const
+{
+    return true;
+}
+
+void
+Carbon::begin()
+{
+    struct addrinfo hints;
+    memset(&hints, 0, sizeof(struct addrinfo));
+    hints.ai_family = AF_UNSPEC;
+    hints.ai_socktype = SOCK_STREAM;
+    hints.ai_protocol = IPPROTO_TCP;
+    sockfd = remote_connect(host.c_str(), port.c_str(), hints);
+
+    if (sockfd == -1)
+        warn("connect to carbon host \"%s:%s\" failed.", host.c_str(), port.c_str());
+
+    //ts++;
+    ts = time(NULL);
+}
+
+void
+Carbon::end()
+{
+    if (sockfd != -1) {
+        close(sockfd);
+        sockfd = -1;
+    }
+}
+
+bool
+Carbon::noOutput(const Info &info)
+{
+    const char * matchs[2] = {
+        "system.mem_ctrls.addr_mapper.bw_total",
+        "system.l2.tags.guestCapacity"
+    };
+
+    for (int i=0; i<2; i++) {
+        if (strncmp(info.name.c_str(), matchs[i], strlen(matchs[i])) == 0)
+            return false;
+    }
+
+    return true;
+}
+
+void
+Carbon::generate(const std::string &key, Result value)
+{
+    char buf[4096];
+    if (sockfd == -1)
+        return;
+    snprintf(buf, 4096, "gem5test.%s %s %ld\n",
+             key.c_str(),
+             ValueToString(value, 2).c_str(),
+             ts);
+    write(sockfd, buf, strlen(buf));
+}
+
+void
+Carbon::visit(const ScalarInfo &info)
+{
+    if (noOutput(info))
+        return;
+    generate(info.name, info.result());
+}
+
+void
+Carbon::visit(const VectorInfo &info)
+{
+    if (noOutput(info))
+        return;
+
+    for (off_type i = 0; i < info.size(); ++i) {
+        if (info.subnames[i].empty())
+            continue;
+        generate(info.name + "." + info.subnames[i], info.result()[i]);
+    }
+}
+
+void Carbon::visit(const FormulaInfo &info)
+{
+    visit((const VectorInfo &)info);
+}
+
+
+#define CARBON_UNIMPL(fun)					\
+    if (noOutput(info))						\
+        return;							\
+    panic("Un-Implement Carbon statistics type %s\n", #fun);
+
+void Carbon::visit(const Vector2dInfo &info)   { CARBON_UNIMPL(Vector2d); }
+void Carbon::visit(const DistInfo &info)       { CARBON_UNIMPL(Dist); }
+void Carbon::visit(const VectorDistInfo &info) { CARBON_UNIMPL(VectorDist); }
+void Carbon::visit(const SparseHistInfo &info) { CARBON_UNIMPL(SparseHist); }
+
+Output *
+initCarbon(const string &host, bool desc)
+{
+    static Carbon carbon;
+    static bool connected = false;
+
+    if (!connected) {
+        carbon.setCarbonHost(host, "2003");
+        carbon.descriptions = desc;
+        connected = true;
+    }
+
+    return &carbon;
+}
+
+} // namespace Stats
diff -r 13b5ba4be2f0 -r 3458d2b8216d src/base/stats/carbon.hh
--- /dev/null	Thu Jan 01 00:00:00 1970 +0000
+++ b/src/base/stats/carbon.hh	Fri Apr 25 11:24:42 2014 +0800
@@ -0,0 +1,92 @@
+/*
+ * Copyright (c) 2014 ACS, ICT.
+ * All rights reserved.
+ *
+ * Redistribution and use in source and binary forms, with or without
+ * modification, are permitted provided that the following conditions are
+ * met: redistributions of source code must retain the above copyright
+ * notice, this list of conditions and the following disclaimer;
+ * redistributions in binary form must reproduce the above copyright
+ * notice, this list of conditions and the following disclaimer in the
+ * documentation and/or other materials provided with the distribution;
+ * neither the name of the copyright holders nor the names of its
+ * contributors may be used to endorse or promote products derived from
+ * this software without specific prior written permission.
+ *
+ * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS
+ * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT
+ * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR
+ * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT
+ * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
+ * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
+ * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,
+ * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY
+ * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
+ * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
+ * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
+ *
+ * Authors: Jiuyue Ma
+ */
+
+#ifndef __BASE_STATS_CARBON_HH__
+#define __BASE_STATS_CARBON_HH__
+
+#include <iosfwd>
+#include <string>
+
+#include "base/stats/output.hh"
+#include "base/stats/types.hh"
+#include "base/output.hh"
+
+namespace Stats {
+
+class Carbon : public Output
+{
+  protected:
+    int sockfd;
+    std::string host;
+    std::string port;
+    time_t ts;
+
+  protected:
+    bool noOutput(const Info &info);
+
+  public:
+    bool descriptions;
+
+  public:
+    Carbon();
+    ~Carbon();
+
+    void setCarbonHost(const std::string &_host,
+                       const std::string &_port = "2003")
+    {
+        host = _host;
+        port = _port;
+    }
+
+    // Implement Visit
+    virtual void visit(const ScalarInfo &info);
+    virtual void visit(const VectorInfo &info);
+    virtual void visit(const DistInfo &info);
+    virtual void visit(const VectorDistInfo &info);
+    virtual void visit(const Vector2dInfo &info);
+    virtual void visit(const FormulaInfo &info);
+    virtual void visit(const SparseHistInfo &info);
+
+    // Implement Output
+    virtual bool valid() const;
+    virtual void begin();
+    virtual void end();
+
+  protected:
+    void generate(const std::string &key, Result value);
+};
+
+std::string ValueToString(Result value, int precision);
+
+Output *initCarbon(const std::string &carbon_host, bool desc);
+
+} // namespace Stats
+
+#endif // __BASE_STATS_CARBON_HH__
diff -r 13b5ba4be2f0 -r 3458d2b8216d src/python/m5/main.py
--- a/src/python/m5/main.py	Fri Apr 04 10:33:17 2014 +0800
+++ b/src/python/m5/main.py	Fri Apr 25 11:24:42 2014 +0800
@@ -313,6 +313,7 @@
 
     # set stats options
     stats.initText(options.stats_file)
+    stats.initCarbon("127.0.0.1")
 
     # set debugging options
     debug.setRemoteGDBPort(options.remote_gdb_port)
diff -r 13b5ba4be2f0 -r 3458d2b8216d src/python/m5/stats/__init__.py
--- a/src/python/m5/stats/__init__.py	Fri Apr 04 10:33:17 2014 +0800
+++ b/src/python/m5/stats/__init__.py	Fri Apr 25 11:24:42 2014 +0800
@@ -39,6 +39,10 @@
     output = internal.stats.initText(filename, desc)
     outputList.append(output)
 
+def initCarbon(host, desc=True):
+    output = internal.stats.initCarbon(host, desc)
+    outputList.append(output)
+
 def initSimStats():
     internal.stats.initSimStats()
 
diff -r 13b5ba4be2f0 -r 3458d2b8216d src/python/swig/stats.i
--- a/src/python/swig/stats.i	Fri Apr 04 10:33:17 2014 +0800
+++ b/src/python/swig/stats.i	Fri Apr 25 11:24:42 2014 +0800
@@ -37,6 +37,7 @@
 
 %{
 #include "base/stats/text.hh"
+#include "base/stats/carbon.hh"
 #include "base/stats/types.hh"
 #include "base/callback.hh"
 #include "base/misc.hh"
@@ -149,6 +150,7 @@
 
 void initSimStats();
 Output *initText(const std::string &filename, bool desc);
+Output *initCarbon(const std::string &carbon_host, bool desc);
 
 void schedStatEvent(bool dump, bool reset,
                     Tick when = curTick(), Tick repeat = 0);
