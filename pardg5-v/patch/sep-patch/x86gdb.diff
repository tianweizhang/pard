diff -r 9c55c0214404 src/base/remote_gdb.cc
--- a/src/base/remote_gdb.cc	Mon Feb 24 20:50:06 2014 -0600
+++ b/src/base/remote_gdb.cc	Thu Feb 27 09:54:41 2014 +0800
@@ -137,6 +137,7 @@
 #include "mem/se_translating_port_proxy.hh"
 #include "sim/full_system.hh"
 #include "sim/system.hh"
+#include "base/loader/object_file.hh"
 
 using namespace std;
 using namespace Debug;
@@ -839,7 +840,7 @@ BaseRemoteGDB::trap(int type)
             if (*p++ != ',') send("E0D");
             val = hex2i(&p);
             if (*p++ != ',') send("E0D");
-            len = hex2i(&p);
+            len = hex2i(&p) * sizeof(TheISA::MachInst);
 
             DPRINTF(GDBMisc, "clear %s, addr=%#x, len=%d\n",
                     break_type(subcmd), val, len);
@@ -871,7 +872,7 @@ BaseRemoteGDB::trap(int type)
             if (*p++ != ',') send("E0D");
             val = hex2i(&p);
             if (*p++ != ',') send("E0D");
-            len = hex2i(&p);
+            len = hex2i(&p) * sizeof(TheISA::MachInst);
 
             DPRINTF(GDBMisc, "set %s, addr=%#x, len=%d\n",
                     break_type(subcmd), val, len);
@@ -902,6 +903,19 @@ BaseRemoteGDB::trap(int type)
             var = string(p, datalen - 1);
             if (var == "C")
                 send("QC0");
+            else if(var == "Attached")
+                send("1");
+/*
+            else if (var == "Offsets")
+            {
+                char obuf[256];
+                snprintf(obuf, 256, "Text=%lx;Data=%lx;Bss=%lx",
+                    context->getSystemPtr()->kernel->textBase(),
+                    context->getSystemPtr()->kernel->dataBase(),
+                    context->getSystemPtr()->kernel->bssBase());
+                send(obuf);
+            }
+*/
             else
                 send("");
             continue;
diff -r 9c55c0214404 src/arch/x86/SConscript
--- a/src/arch/x86/SConscript	Mon Feb 24 20:50:06 2014 -0600
+++ b/src/arch/x86/SConscript	Thu Feb 27 09:54:41 2014 +0800
@@ -86,6 +86,9 @@
     DebugFlag('Decoder', "Decoder debug output")
     DebugFlag('X86', "Generic X86 ISA debugging")
 
+    DebugFlag('X86Predecoder', "X86 predecoder debug output")
+    Source('predecoder.cc')
+
     python_files = (
         '__init__.py',
         'general_purpose/__init__.py',
diff -r 9c55c0214404 src/arch/x86/decoder.hh
--- a/src/arch/x86/decoder.hh	Mon Feb 24 20:50:06 2014 -0600
+++ b/src/arch/x86/decoder.hh	Thu Feb 27 09:54:41 2014 +0800
@@ -49,6 +49,7 @@
 
 class Decoder
 {
+    friend class X86Predecoder;
   private:
     //These are defined and documented in decoder_tables.cc
     static const uint8_t Prefixes[256];
diff -r 9c55c0214404 src/arch/x86/remote_gdb.cc
--- a/src/arch/x86/remote_gdb.cc	Mon Feb 24 20:50:06 2014 -0600
+++ b/src/arch/x86/remote_gdb.cc	Thu Feb 27 09:54:41 2014 +0800
@@ -42,41 +42,208 @@
 
 #include <string>
 
+#include "arch/x86/decoder.hh"
+#include "arch/x86/predecoder.hh"
+#include "arch/x86/pagetable.hh"
+#include "arch/x86/registers.hh"
 #include "arch/x86/remote_gdb.hh"
-#include "arch/vtophys.hh"
+#include "arch/x86/utility.hh"
+#include "arch/x86/vtophys.hh"
+#include "arch/x86/pagetable_walker.hh"
+#include "arch/x86/insts/badmicroop.hh"
 #include "base/remote_gdb.hh"
 #include "base/socket.hh"
 #include "base/trace.hh"
+#include "cpu/static_inst.hh"
 #include "cpu/thread_context.hh"
+#include "debug/GDBAcc.hh"
+#include "debug/GDBMisc.hh"
+#include "sim/full_system.hh"
 
 using namespace std;
 using namespace X86ISA;
 
+static inline Addr
+truncPage(Addr addr)
+{
+    return addr & ~(PageBytes - 1);
+}
+
+static inline Addr
+roundPage(Addr addr)
+{
+    return (addr + PageBytes - 1) & ~(PageBytes - 1);
+}
+
+static inline bool
+virtvalid(ThreadContext *tc, Addr vaddr)
+{
+    Walker *walker = tc->getDTBPtr()->getWalker();
+    unsigned logBytes;
+    Fault fault = walker->startFunctional(
+            tc, vaddr, logBytes, BaseTLB::Read);
+    if (fault != NoFault)
+        return false;
+    return true;
+}
+
 RemoteGDB::RemoteGDB(System *_system, ThreadContext *c)
     : BaseRemoteGDB(_system, c, NumGDBRegs)
-{}
+{
+}
 
+/*
+ * Determine if the mapping at va..(va+len) is valid.
+ */
 bool RemoteGDB::acc(Addr va, size_t len)
 {
-    panic("Remote gdb acc not implemented in x86!\n");
+    if (!FullSystem) {
+        panic("X86 RemoteGDB only support full system.\n");
+    }
+
+    Addr last_va;
+    va       = truncPage(va);
+    last_va  = roundPage(va + len);
+
+    do  {
+        if (!virtvalid(context, va)) {
+             return false;
+        }
+        va += PageBytes;
+    } while (va < last_va);
+
+    DPRINTF(GDBAcc, "acc:   %#x mapping is valid\n", va);
+    return true;
 }
 
+/*
+ * Translate the kernel debugger register format into the GDB register
+ * format.
+ */
 void RemoteGDB::getregs()
 {
-    panic("Remote gdb getregs not implemented in x86!\n");
+    DPRINTF(GDBAcc, "getregs in X86 RemoteGDB.\n");
+
+    memset(gdbregs.regs, 0, gdbregs.bytes());
+    gdbregs.regs[GDB_AX] = context->readIntReg(X86ISA::INTREG_RAX);
+    gdbregs.regs[GDB_BX] = context->readIntReg(X86ISA::INTREG_RBX);
+    gdbregs.regs[GDB_CX] = context->readIntReg(X86ISA::INTREG_RCX);
+    gdbregs.regs[GDB_DX] = context->readIntReg(X86ISA::INTREG_RDX);
+    gdbregs.regs[GDB_SI] = context->readIntReg(X86ISA::INTREG_RSI);
+    gdbregs.regs[GDB_DI] = context->readIntReg(X86ISA::INTREG_RDI);
+    gdbregs.regs[GDB_BP] = context->readIntReg(X86ISA::INTREG_RBP);
+    gdbregs.regs[GDB_SP] = context->readIntReg(X86ISA::INTREG_RSP);
+    gdbregs.regs[GDB_R8] = context->readIntReg(X86ISA::INTREG_R8);
+    gdbregs.regs[GDB_R9] = context->readIntReg(X86ISA::INTREG_R9);
+    gdbregs.regs[GDB_R10] = context->readIntReg(X86ISA::INTREG_R10);
+    gdbregs.regs[GDB_R11] = context->readIntReg(X86ISA::INTREG_R11);
+    gdbregs.regs[GDB_R12] = context->readIntReg(X86ISA::INTREG_R12);
+    gdbregs.regs[GDB_R13] = context->readIntReg(X86ISA::INTREG_R13);
+    gdbregs.regs[GDB_R14] = context->readIntReg(X86ISA::INTREG_R14);
+    gdbregs.regs[GDB_R15] = context->readIntReg(X86ISA::INTREG_R15);
+
+    gdbregs.regs[GDB_PC] = context->pcState().pc();
+
+    gdbregs.regs[GDB_CS_PS] = context->readMiscReg(X86ISA::MISCREG_CS) << 32 | 
+                                       context->readMiscReg(X86ISA::MISCREG_RFLAGS);
+    gdbregs.regs[GDB_DS_SS] = context->readMiscReg(X86ISA::MISCREG_DS) << 32 |
+                                       context->readMiscReg(X86ISA::MISCREG_SS);
+    gdbregs.regs[GDB_FS_ES] = context->readMiscReg(X86ISA::MISCREG_FS) << 32 |
+                                       context->readMiscReg(X86ISA::MISCREG_ES);
+    gdbregs.regs[GDB_GS]    = context->readMiscReg(X86ISA::MISCREG_GS);
 }
 
 void RemoteGDB::setregs()
 {
-    panic("Remote gdb setregs not implemented in x86!\n");
+    DPRINTF(GDBAcc, "setregs in X86 RemoteGDB.\n");
+    warn("X86ISA::RemoteGDB::setregs() not fully tested, this may damage your simulated system.");
+    context->setIntReg(X86ISA::INTREG_RAX, gdbregs.regs[GDB_AX]);
+    context->setIntReg(X86ISA::INTREG_RBX, gdbregs.regs[GDB_BX]);
+    context->setIntReg(X86ISA::INTREG_RCX, gdbregs.regs[GDB_CX]);
+    context->setIntReg(X86ISA::INTREG_RDX, gdbregs.regs[GDB_DX]);
+    context->setIntReg(X86ISA::INTREG_RSI, gdbregs.regs[GDB_SI]);
+    context->setIntReg(X86ISA::INTREG_RDI, gdbregs.regs[GDB_DI]);
+    context->setIntReg(X86ISA::INTREG_RBP, gdbregs.regs[GDB_BP]);
+    context->setIntReg(X86ISA::INTREG_RSP, gdbregs.regs[GDB_SP]);
+    context->setIntReg(X86ISA::INTREG_R8,  gdbregs.regs[GDB_R8]);
+    context->setIntReg(X86ISA::INTREG_R9,  gdbregs.regs[GDB_R9]);
+    context->setIntReg(X86ISA::INTREG_R10, gdbregs.regs[GDB_R10]);
+    context->setIntReg(X86ISA::INTREG_R11, gdbregs.regs[GDB_R11]);
+    context->setIntReg(X86ISA::INTREG_R12, gdbregs.regs[GDB_R12]);
+    context->setIntReg(X86ISA::INTREG_R13, gdbregs.regs[GDB_R13]);
+    context->setIntReg(X86ISA::INTREG_R14, gdbregs.regs[GDB_R14]);
+    context->setIntReg(X86ISA::INTREG_R15, gdbregs.regs[GDB_R15]);
+    context->pcState().set(gdbregs.regs[GDB_PC]);
+    context->setMiscReg(X86ISA::MISCREG_RFLAGS, bits(gdbregs.regs[GDB_CS_PS], 31, 0));
+    context->setMiscReg(X86ISA::MISCREG_CS,     bits(gdbregs.regs[GDB_CS_PS], 63, 32));
+    context->setMiscReg(X86ISA::MISCREG_SS,     bits(gdbregs.regs[GDB_DS_SS], 31,  0));
+    context->setMiscReg(X86ISA::MISCREG_DS,     bits(gdbregs.regs[GDB_DS_SS], 63, 32));
+    context->setMiscReg(X86ISA::MISCREG_ES,     bits(gdbregs.regs[GDB_FS_ES], 31,  0));
+    context->setMiscReg(X86ISA::MISCREG_FS,     bits(gdbregs.regs[GDB_FS_ES], 63, 32));
+    context->setMiscReg(X86ISA::MISCREG_GS,     bits(gdbregs.regs[GDB_GS],    31,  0));
 }
 
+
 void RemoteGDB::clearSingleStep()
 {
-    panic("Remote gdb clearSingleStep not implemented in x86!\n");
+    DPRINTF(GDBMisc, "clearSingleStep bt_addr=%#x nt_addr=%#x\n",
+            takenBkpt, notTakenBkpt);
+
+    if (takenBkpt != 0)
+        clearTempBreakpoint(takenBkpt);
+
+    if (notTakenBkpt != 0)
+        clearTempBreakpoint(notTakenBkpt);
 }
 
 void RemoteGDB::setSingleStep()
 {
-    panic("Remoge gdb setSingleStep not implemented in x86!\n");
+    PCState pc = context->pcState();
+    PCState bpc;
+    bool set_bt = false;
+
+    // User was stopped at pc, e.g. the instruction at pc was not
+    // executed.
+    Decoder *decoder = context->getDecoderPtr();
+    X86Predecoder predecoder(read<MachInst>(pc.pc()), decoder);
+    ExtMachInst &emi = predecoder.getExtMachInst();
+
+    // we assert X86Inst are all MacroopInst
+    StaticInstPtr si = decoder->decodeInst(emi);
+    assert (si->isMacroop());
+
+    pc.size(predecoder.getInstSize());
+    pc.npc(pc.pc() + pc.size());
+
+    MicroPC microPC = 0;
+    StaticInstPtr msi = NULL;
+    while ((msi = si->fetchMicroop(microPC++)) != badMicroop)
+    {
+        if (msi->getName() == "wrip") {
+            uint64_t SrcReg1 = context->readIntReg(msi->srcRegIdx(0));
+            uint64_t SrcReg2 = context->readIntReg(msi->srcRegIdx(1));
+            uint64_t CSBase  = context->readIntReg(msi->srcRegIdx(2));
+
+            DPRINTF(GDBMisc, "found a branch inst @ %#x\n", pc.pc());
+            DPRINTF(GDBMisc, "  SrcReg1 = %#x;  srcReg2 = %#x;  CSBase= %#x\n", 
+                    SrcReg1, SrcReg2, CSBase);
+        }
+        else if (msi->getName() == "wripi") {
+            DPRINTF(GDBMisc, "found a branch inst @ %#x\n", pc.pc());
+        }
+/*
+        if (bpc.pc() != pc.npc())
+            set_bt = true;
+*/
+    }
+    
+
+    setTempBreakpoint(notTakenBkpt = pc.npc());
+
+    if (set_bt)
+        setTempBreakpoint(takenBkpt = bpc.pc());
+
+    DPRINTF(GDBMisc, "setSingleStep bt_addr=%#x nt_addr=%#x\n",
+            takenBkpt, notTakenBkpt);
 }
+
diff -r 9c55c0214404 src/arch/x86/remote_gdb.hh
--- a/src/arch/x86/remote_gdb.hh	Mon Feb 24 20:50:06 2014 -0600
+++ b/src/arch/x86/remote_gdb.hh	Thu Feb 27 09:54:41 2014 +0800
@@ -53,6 +53,36 @@
       protected:
         enum RegisterContants
         {
+            /* Below are 8-byte length */
+            GDB_AX,                 /* 0 */
+            GDB_BX,                 /* 1 */
+            GDB_CX,                 /* 2 */
+            GDB_DX,                 /* 3 */
+            GDB_SI,                 /* 4 */
+            GDB_DI,                 /* 5 */
+            GDB_BP,                 /* 6 */
+            GDB_SP,                 /* 7 */
+            GDB_R8,                 /* 8 */
+            GDB_R9,                 /* 9 */
+            GDB_R10,                /* 10 */
+            GDB_R11,                /* 11 */
+            GDB_R12,                /* 12 */
+            GDB_R13,                /* 13 */
+            GDB_R14,                /* 14 */
+            GDB_R15,                /* 15 */
+            GDB_PC,                 /* 16 */
+            /* Below are 4byte length */
+            GDB_CS_PS,
+            GDB_DS_SS,
+            GDB_FS_ES,
+            GDB_GS,
+            //GDB_PS,                 /* 17 */
+            //GDB_CS,                 /* 18 */
+            //GDB_SS,                 /* 19 */
+            //GDB_DS,                 /* 20 */
+            //GDB_ES,                 /* 21 */
+            //GDB_FS,                 /* 22 */
+            //GDB_GS,                 /* 23 */
             NumGDBRegs
             //XXX fill this in
         };
@@ -70,6 +100,8 @@
         void setSingleStep();
 
         Addr nextBkpt;
+        Addr notTakenBkpt;
+        Addr takenBkpt;
     };
 }

diff -r 9c55c0214404 src/arch/x86/predecoder.cc
new file mode 100644
--- /dev/null				Mon Feb 24 20:50:06 2014 -0600
+++ b/src/arch/x86/predecoder.cc	Mon Feb 24 20:50:06 2014 -0600
@@ -0,0 +1,379 @@
+#include "arch/x86/predecoder.hh"
+#include "arch/x86/regs/misc.hh"
+#include "base/misc.hh"
+#include "base/trace.hh"
+#include "base/types.hh"
+#include "debug/X86Predecoder.hh"
+
+namespace X86ISA
+{
+
+const uint8_t * X86Predecoder::Prefixes = Decoder::Prefixes;
+const uint8_t (* X86Predecoder::UsesModRM)[256] = Decoder::UsesModRM;
+const uint8_t (* X86Predecoder::ImmediateType)[256] = Decoder::ImmediateType;
+const uint8_t (* X86Predecoder::SizeTypeToSize)[10] = Decoder::SizeTypeToSize;
+
+X86Predecoder::State
+X86Predecoder::doResetState()
+{
+    emi.rex = 0;
+    emi.legacy = 0;
+    emi.opcode.num = 0;
+    emi.opcode.op = 0;
+    emi.opcode.prefixA = emi.opcode.prefixB = 0;
+
+    immediateCollected = 0;
+    emi.immediate = 0;
+    emi.displacement = 0;
+    emi.dispSize = 0;
+
+    emi.modRM = 0;
+    emi.sib = 0;
+
+    return Decoder::PrefixState;
+}
+
+void
+X86Predecoder::process()
+{
+    state = doResetState();
+
+    while (!instDone) {
+        uint8_t nextByte = getNextByte();
+        switch (state) {
+          case Decoder::PrefixState:
+            state = doPrefixState(nextByte);
+            break;
+          case Decoder::OpcodeState:
+            state = doOpcodeState(nextByte);
+            break;
+          case Decoder::ModRMState:
+            state = doModRMState(nextByte);
+            break;
+          case Decoder::SIBState:
+            state = doSIBState(nextByte);
+            break;
+          case Decoder::DisplacementState:
+            state = doDisplacementState();
+            break;
+          case Decoder::ImmediateState:
+            state = doImmediateState();
+            break;
+          case Decoder::ErrorState:
+            panic("Went to the error state in the decoder.\n");
+          default:
+            panic("Unrecognized state! %d\n", state);
+        }
+    }
+}
+
+//Either get a prefix and record it in the ExtMachInst, or send the
+//state machine on to get the opcode(s).
+X86Predecoder::State
+X86Predecoder::doPrefixState(uint8_t nextByte)
+{
+    uint8_t prefix = Prefixes[nextByte];
+    State nextState = Decoder::PrefixState;
+    // REX prefixes are only recognized in 64 bit mode.
+    if (prefix == RexPrefix && emi.mode.submode != SixtyFourBitMode)
+        prefix = 0;
+    if (prefix)
+        consumeByte();
+    switch(prefix)
+    {
+        //Operand size override prefixes
+      case OperandSizeOverride:
+        DPRINTF(X86Predecoder, "Found operand size override prefix.\n");
+        emi.legacy.op = true;
+        break;
+      case AddressSizeOverride:
+        DPRINTF(X86Predecoder, "Found address size override prefix.\n");
+        emi.legacy.addr = true;
+        break;
+        //Segment override prefixes
+      case CSOverride:
+      case DSOverride:
+      case ESOverride:
+      case FSOverride:
+      case GSOverride:
+      case SSOverride:
+        DPRINTF(X86Predecoder, "Found segment override.\n");
+        emi.legacy.seg = prefix;
+        break;
+      case Lock:
+        DPRINTF(X86Predecoder, "Found lock prefix.\n");
+        emi.legacy.lock = true;
+        break;
+      case Rep:
+        DPRINTF(X86Predecoder, "Found rep prefix.\n");
+        emi.legacy.rep = true;
+        break;
+      case Repne:
+        DPRINTF(X86Predecoder, "Found repne prefix.\n");
+        emi.legacy.repne = true;
+        break;
+      case RexPrefix:
+        DPRINTF(X86Predecoder, "Found Rex prefix %#x.\n", nextByte);
+        emi.rex = nextByte;
+        break;
+      case 0:
+        nextState = Decoder::OpcodeState;
+        break;
+      default:
+        panic("Unrecognized prefix %#x\n", nextByte);
+    }
+    return nextState;
+}
+
+//Load all the opcodes (currently up to 2) and then figure out
+//what immediate and/or ModRM is needed.
+X86Predecoder::State
+X86Predecoder::doOpcodeState(uint8_t nextByte)
+{
+    State nextState = Decoder::ErrorState;
+    emi.opcode.num++;
+    //We can't handle 3+ byte opcodes right now
+    assert(emi.opcode.num < 4);
+    consumeByte();
+    if(emi.opcode.num == 1 && nextByte == 0x0f)
+    {
+        nextState = Decoder::OpcodeState;
+        DPRINTF(X86Predecoder, "Found two byte opcode.\n");
+        emi.opcode.prefixA = nextByte;
+    }
+    else if(emi.opcode.num == 2 && (nextByte == 0x38 || nextByte == 0x3A))
+    {
+        nextState = Decoder::OpcodeState;
+        DPRINTF(X86Predecoder, "Found three byte opcode.\n");
+        emi.opcode.prefixB = nextByte;
+    }
+    else
+    {
+        DPRINTF(X86Predecoder, "Found opcode %#x.\n", nextByte);
+        emi.opcode.op = nextByte;
+
+        //Figure out the effective operand size. This can be overriden to
+        //a fixed value at the decoder level.
+        int logOpSize;
+        if (emi.rex.w)
+            logOpSize = 3; // 64 bit operand size
+        else if (emi.legacy.op)
+            logOpSize = altOp;
+        else
+            logOpSize = defOp;
+
+        //Set the actual op size
+        emi.opSize = 1 << logOpSize;
+
+        //Figure out the effective address size. This can be overriden to
+        //a fixed value at the decoder level.
+        int logAddrSize;
+        if(emi.legacy.addr)
+            logAddrSize = altAddr;
+        else
+            logAddrSize = defAddr;
+
+        //Set the actual address size
+        emi.addrSize = 1 << logAddrSize;
+
+        //Figure out the effective stack width. This can be overriden to
+        //a fixed value at the decoder level.
+        emi.stackSize = 1 << stack;
+
+        //Figure out how big of an immediate we'll retreive based
+        //on the opcode.
+        int immType = ImmediateType[emi.opcode.num - 1][nextByte];
+        if (emi.opcode.num == 1 && nextByte >= 0xA0 && nextByte <= 0xA3)
+            immediateSize = SizeTypeToSize[logAddrSize - 1][immType];
+        else
+            immediateSize = SizeTypeToSize[logOpSize - 1][immType];
+
+        //Determine what to expect next
+        if (UsesModRM[emi.opcode.num - 1][nextByte]) {
+            nextState = Decoder::ModRMState;
+        } else {
+            if(immediateSize) {
+                nextState = Decoder::ImmediateState;
+            } else {
+                instDone = true;
+                nextState = Decoder::ResetState;
+            }
+        }
+    }
+    return nextState;
+}
+
+//Get the ModRM byte and determine what displacement, if any, there is.
+//Also determine whether or not to get the SIB byte, displacement, or
+//immediate next.
+X86Predecoder::State
+X86Predecoder::doModRMState(uint8_t nextByte)
+{
+    State nextState = Decoder::ErrorState;
+    ModRM modRM;
+    modRM = nextByte;
+    DPRINTF(X86Predecoder, "Found modrm byte %#x.\n", nextByte);
+    if (defOp == 1) {
+        //figure out 16 bit displacement size
+        if ((modRM.mod == 0 && modRM.rm == 6) || modRM.mod == 2)
+            displacementSize = 2;
+        else if (modRM.mod == 1)
+            displacementSize = 1;
+        else
+            displacementSize = 0;
+    } else {
+        //figure out 32/64 bit displacement size
+        if ((modRM.mod == 0 && modRM.rm == 5) || modRM.mod == 2)
+            displacementSize = 4;
+        else if (modRM.mod == 1)
+            displacementSize = 1;
+        else
+            displacementSize = 0;
+    }
+
+    // The "test" instruction in group 3 needs an immediate, even though
+    // the other instructions with the same actual opcode don't.
+    if (emi.opcode.num == 1 && (modRM.reg & 0x6) == 0) {
+       if (emi.opcode.op == 0xF6)
+           immediateSize = 1;
+       else if (emi.opcode.op == 0xF7)
+           immediateSize = (emi.opSize == 8) ? 4 : emi.opSize;
+    }
+
+    //If there's an SIB, get that next.
+    //There is no SIB in 16 bit mode.
+    if (modRM.rm == 4 && modRM.mod != 3) {
+            // && in 32/64 bit mode)
+        nextState = Decoder::SIBState;
+    } else if(displacementSize) {
+        nextState = Decoder::DisplacementState;
+    } else if(immediateSize) {
+        nextState = Decoder::ImmediateState;
+    } else {
+        instDone = true;
+        nextState = Decoder::ResetState;
+    }
+    //The ModRM byte is consumed no matter what
+    consumeByte();
+    emi.modRM = modRM;
+    return nextState;
+}
+
+//Get the SIB byte. We don't do anything with it at this point, other
+//than storing it in the ExtMachInst. Determine if we need to get a
+//displacement or immediate next.
+X86Predecoder::State
+X86Predecoder::doSIBState(uint8_t nextByte)
+{
+    State nextState = Decoder::ErrorState;
+    emi.sib = nextByte;
+    DPRINTF(X86Predecoder, "Found SIB byte %#x.\n", nextByte);
+    consumeByte();
+    if (emi.modRM.mod == 0 && emi.sib.base == 5)
+        displacementSize = 4;
+    if (displacementSize) {
+        nextState = Decoder::DisplacementState;
+    } else if(immediateSize) {
+        nextState = Decoder::ImmediateState;
+    } else {
+        instDone = true;
+        nextState = Decoder::ResetState;
+    }
+    return nextState;
+}
+
+//Gather up the displacement, or at least as much of it
+//as we can get.
+X86Predecoder::State
+X86Predecoder::doDisplacementState()
+{
+    State nextState = Decoder::ErrorState;
+
+    getImmediate(immediateCollected,
+            emi.displacement,
+            displacementSize);
+
+    DPRINTF(X86Predecoder, "Collecting %d byte displacement, got %d bytes.\n",
+            displacementSize, immediateCollected);
+
+    if(displacementSize == immediateCollected) {
+        //Reset this for other immediates.
+        immediateCollected = 0;
+        //Sign extend the displacement
+        switch(displacementSize)
+        {
+          case 1:
+            emi.displacement = sext<8>(emi.displacement);
+            break;
+          case 2:
+            emi.displacement = sext<16>(emi.displacement);
+            break;
+          case 4:
+            emi.displacement = sext<32>(emi.displacement);
+            break;
+          default:
+            panic("Undefined displacement size!\n");
+        }
+        DPRINTF(X86Predecoder, "Collected displacement %#x.\n",
+                emi.displacement);
+        if(immediateSize) {
+            nextState = Decoder::ImmediateState;
+        } else {
+            instDone = true;
+            nextState = Decoder::ResetState;
+        }
+
+        emi.dispSize = displacementSize;
+    }
+    else
+        nextState = Decoder::DisplacementState;
+    return nextState;
+}
+
+//Gather up the immediate, or at least as much of it
+//as we can get
+X86Predecoder::State
+X86Predecoder::doImmediateState()
+{
+    State nextState = Decoder::ErrorState;
+
+    getImmediate(immediateCollected,
+            emi.immediate,
+            immediateSize);
+
+    DPRINTF(X86Predecoder, "Collecting %d byte immediate, got %d bytes.\n",
+            immediateSize, immediateCollected);
+
+    if(immediateSize == immediateCollected)
+    {
+        //Reset this for other immediates.
+        immediateCollected = 0;
+
+        //XXX Warning! The following is an observed pattern and might
+        //not always be true!
+
+        //Instructions which use 64 bit operands but 32 bit immediates
+        //need to have the immediate sign extended to 64 bits.
+        //Instructions which use true 64 bit immediates won't be
+        //affected, and instructions that use true 32 bit immediates
+        //won't notice.
+        switch(immediateSize)
+        {
+          case 4:
+            emi.immediate = sext<32>(emi.immediate);
+            break;
+          case 1:
+            emi.immediate = sext<8>(emi.immediate);
+        }
+
+        DPRINTF(X86Predecoder, "Collected immediate %#x.\n",
+                emi.immediate);
+        instDone = true;
+        nextState = Decoder::ResetState;
+    }
+    else
+        nextState = Decoder::ImmediateState;
+    return nextState;
+}
+
+}
diff -r 9c55c0214404 src/arch/x86/predecoder.hh
new file mode 100644
--- /dev/null				Mon Feb 24 20:50:06 2014 -0600
+++ b/src/arch/x86/predecoder.hh	Mon Feb 24 20:50:06 2014 -0600
@@ -0,0 +1,119 @@
+#ifndef __ARCH_X86_PREDECODER_HH__
+#define __ARCH_X86_PREDECODER_HH__
+
+#include <cassert>
+#include <vector>
+
+#include "arch/x86/regs/misc.hh"
+#include "arch/x86/types.hh"
+#include "arch/x86/decoder.hh"
+#include "base/bitfield.hh"
+#include "base/misc.hh"
+#include "base/trace.hh"
+#include "base/types.hh"
+#include "cpu/static_inst.hh"
+#include "debug/X86Predecoder.hh"
+
+namespace X86ISA
+{
+
+class X86Predecoder {
+
+  protected:
+    //These are defined in decode.hh
+    typedef Decoder::State State;
+    static const uint8_t * Prefixes;
+    static const uint8_t (* UsesModRM)[256];
+    static const uint8_t (* ImmediateType)[256];
+    static const uint8_t (* SizeTypeToSize)[10];
+
+  protected:
+
+    //The size of the displacement value
+    int displacementSize;
+    //The size of the immediate value
+    int immediateSize;
+    //This is how much of any immediate value we've gotten. This is used
+    //for both the actual immediate and the displacement.
+    int immediateCollected;
+
+    State state;
+    bool instDone;
+    int offset;
+    ExtMachInst emi;
+    MachInst inst;
+
+    uint8_t altOp;
+    uint8_t defOp;
+    uint8_t altAddr;
+    uint8_t defAddr;
+    uint8_t stack;
+
+  public:
+    X86Predecoder(MachInst _inst, Decoder *decoder)
+      : state(Decoder::ResetState), instDone(false), offset(0), inst(_inst) {
+        altOp = decoder->altOp;
+        defOp = decoder->defOp;
+        altAddr = decoder->altAddr;
+        defAddr = decoder->defAddr;
+        stack = decoder->stack;
+        process();
+    }
+
+    ExtMachInst& getExtMachInst() { assert(instDone); return emi; }
+    int getInstSize() { assert(instDone); return offset; }
+
+  protected:
+    void consumeByte() {
+        offset ++;
+        assert(offset<sizeof(MachInst));
+    }
+    void consumeBytes(int numBytes) {
+        offset += numBytes;
+        assert(offset<sizeof(MachInst));
+    }
+    uint8_t getNextByte() {
+        assert(offset<sizeof(MachInst));
+        return ((uint8_t *)&inst)[offset];
+    }
+
+    void getImmediate(int &collected, uint64_t &current, int size)
+    {
+        //Figure out how many bytes we still need to get for the
+        //immediate.
+        int toGet = size - collected;
+        //Figure out how many bytes are left in our "buffer"
+        int remaining = sizeof(MachInst) - offset;
+        //Get as much as we need, up to the amount available.
+        toGet = toGet > remaining ? remaining : toGet;
+
+        //Shift the bytes we want to be all the way to the right
+        uint64_t partialImm = inst >> (offset * 8);
+        //Mask off what we don't want
+        partialImm &= mask(toGet * 8);
+        //Shift it over to overlay with our displacement.
+        partialImm <<= (immediateCollected * 8);
+        //Put it into our displacement
+        current |= partialImm;
+        //Update how many bytes we've collected.
+        collected += toGet;
+        consumeBytes(toGet);
+    }
+
+
+  protected:
+    void process();
+
+    //Functions to handle each of the states
+    State doResetState();
+    State doPrefixState(uint8_t);
+    State doOpcodeState(uint8_t);
+    State doModRMState(uint8_t);
+    State doSIBState(uint8_t);
+    State doDisplacementState();
+    State doImmediateState();
+};
+
+} // namespace X86ISA
+
+#endif // __ARCH_X86_PREDECODER_HH__
